# baseline correction
data_1 = subtr_baseline(data,
type = "polynomial",
degree = 8,
raw = TRUE,
make_rel = TRUE
)
plot(data_1)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10000,
d = 2,
wavenum_width = 100)
plot(data_2)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 39,
derivative = 0,
type = "wh",
lambda = 10000,
d = 2,
wavenum_width = 100)
plot(data_2)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 100000,
d = 2,
wavenum_width = 100)
plot(data_2)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 8000,
d = 2,
wavenum_width = 100)
plot(data_2)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 9500,
d = 2,
wavenum_width = 100)
plot(data_2)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2,
wavenum_width = 100)
plot(data_2)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2,
wavenum_width = 10)
plot(data_2)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2
)
plot(data_2)
data_3 = subtr_baseline(data_2,
type = "polynomial",
degree = 8,
raw = TRUE,
make_rel = TRUE
)
plot(data_3)
data_3 = subtr_baseline(data_2,
type = "polynomial",
degree = 15,
raw = TRUE,
make_rel = TRUE
)
plot(data_3)
data_3
data_3 = subtr_baseline(data_2,
type = "polynomial",
degree = 2,
raw = TRUE,
make_rel = TRUE
)
plot(data_3)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2
)
plot(data_2)
data_3 = subtr_baseline(data_2,
type = "polynomial",
degree = 2,
raw = TRUE,
make_rel = TRUE
)
plot(data_3)
# baseline correction
data_1 = subtr_baseline(data,
type = "polynomial",
degree = 8,
raw = TRUE,
make_rel = TRUE
)
plot(data_1)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2
)
plot(data_2)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "sg",
wavenum_width = 100)
plot(data_2)
# baseline correction
data_1 = subtr_baseline(data,
type = "polynomial",
degree = 8,
raw = TRUE,
make_rel = TRUE
)
plot(data_1)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2
)
plot(data_2)
# smooth
data_3 = smooth_intens(data_2,
polynomal = 4,
window = 49,
derivative = 0,
type = "sg",
wavenum_width = 100)
plot(data_3)
# IMPORT FILE
data = read_text("PedjaB01_processed.csv")
# plot the raw data for inspection
plot(data)
# baseline correction
data_1 = subtr_baseline(data,
type = "polynomial",
degree = 8,
raw = TRUE,
make_rel = TRUE
)
plot(data_1)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2
)
plot(data_2)
# smooth
data_3 = smooth_intens(data_2,
polynomal = 4,
window = 49,
derivative = 0,
type = "sg",
wavenum_width = 100)
plot(data_3)
# IMPORT FILE
data = read_text("PedjaB01_processed.csv")
# plot the raw data for inspection
plot(data)
# baseline correction
data_1 = subtr_baseline(data,
type = "polynomial",
degree = 8,
raw = TRUE,
make_rel = TRUE
)
plot(data_1)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2
)
plot(data_2)
# smooth
data_3 = smooth_intens(data_2,
polynomal = 4,
window = 49,
derivative = 0,
type = "sg",
wavenum_width = 100)
plot(data_3)
###############
# IMPORT FILE #
###############
data = read_text("PedjaB01_processed.csv")
# plot the raw data for inspection
plot(data)
# baseline correction
subtr_baseline(data,
type = "polynomial",
degree = 8,
raw = TRUE,
make_rel = TRUE
)
# smooth - WH
smooth_intens(data,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2
)
# smooth - SG
smooth_intens(data,
polynomal = 4,
window = 49,
derivative = 0,
type = "sg",
wavenum_width = 100)
plot(data)
# setup working directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/viminacijum_out")
# load the libraries
library(OpenSpecy)
###############
# IMPORT FILE #
###############
data = read_text("PedjaB01_processed.csv")
# plot the raw data for inspection
plot(data)
# baseline correction
data_1 = subtr_baseline(data,
type = "polynomial",
degree = 8,
raw = TRUE,
make_rel = TRUE
)
plot(data_1)
# smooth
data_2 = smooth_intens(data_1,
polynomal = 4,
window = 49,
derivative = 0,
type = "wh",
lambda = 10500,
d = 2
)
plot(data_2)
# smooth
data_3 = smooth_intens(data_2,
polynomal = 4,
window = 49,
derivative = 0,
type = "sg",
wavenum_width = 100)
plot(data_3)
# smooth
data_3 = smooth_intens(data_2,
polynomal = 4,
window = 49,
derivative = 0,
type = "sg"
)
plot(data_3)
# setup working directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/omnic_breakoff_input/csv files")
# load the libraries
library(OpenSpecy)
###############
# IMPORT FILE #
###############
file_list = list.files(pattern = "Lazar .\\*.csv")
print(file_list)
###############
# IMPORT FILE #
###############
file_list = list.files(pattern = "Lazar .CSV.\\*.csv")
print(file_list)
###############
# IMPORT FILE #
###############
file_list = list.files(pattern = "Lazar .\\*.CSV")
print(file_list)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
data = read_text(file_name)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
source("~/Programiranje/PhD/SpectralTool/openspecy_batch.R", echo=TRUE)
# set work directory
setwd("C:\Users\Lenovo\Documents\Programiranje\PhD\SpectralTool\datasets\procrustes")
# set work directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/procrustes")
# read and inspect dataframe
df_1 = read.csv('master_omnic.csv')
View(df_1)
df_2 = read.csv('master_openspecy.csv')
View(df_2)
#load libraries
library(ggplot2)
library(dplyr)
# plot the all spectral lines - df_1
df1_long = pivot_longer(df_1, cols = starts_with("Std_"),
names_to = "variable",
values_to = "value")
library(tidyr)
# plot the all spectral lines - df_1
df1_long = pivot_longer(df_1, cols = starts_with("Std_"),
names_to = "variable",
values_to = "value")
ggplot(df1_long, aes(x = wavenumber, y = value, color = variable)) +
geom_line() +
theme_minimal() +
labs(title = "Multiple Intensity Variables Against Wavelength",
x = "Wavelength",
y = "Intensity",
color = "Variable") +
theme(plot.title = element_text(hjust = 0.5))
# set work directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/procrustes")
# read and inspect dataframe
df_1 = read.csv('master_omnic.csv')
df_2 = read.csv('master_openspecy.csv')
# plot the all spectral lines - df_1
df1_long = pivot_longer(df_1, cols = starts_with("Std_"),
names_to = "variable",
values_to = "value")
ggplot(df1_long, aes(x = wavenumber, y = value, color = variable)) +
geom_line() +
theme_minimal() +
labs(title = "Multiple Intensity Variables Against Wavelength",
x = "Wavelength",
y = "Intensity",
color = "Variable") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(df1_long, aes(x = wavenumber, y = value, color = variable)) +
geom_line() +
theme_minimal() +
labs(title = "Spectra processed in OMNIC",
x = "Wavelength",
y = "Intensity",
color = "Variable") +
theme(plot.title = element_text(hjust = 0.5))
# plot the all spectral lines - df_2
df2_long = pivot_longer(df_2, cols = starts_with("Std_"),
names_to = "variable",
values_to = "value")
ggplot(df2_long, aes(x = wavenumber, y = value, color = variable)) +
geom_line() +
theme_minimal() +
labs(title = "Multiple Intensity Variables Against Wavelength",
x = "Wavelength",
y = "Intensity",
color = "Variable") +
theme(plot.title = element_text(hjust = 0.5))
# plot the all spectral lines - df_1
df1_long = pivot_longer(df_1, cols = starts_with("Std_"),
names_to = "variable",
values_to = "value")
plot_1 = ggplot(df1_long, aes(x = wavenumber, y = value, color = variable)) +
geom_line() +
theme_minimal() +
labs(title = "Spectra processed in OMNIC",
x = "Wavelength",
y = "Intensity",
color = "Variable") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(df2_long, aes(x = wavenumber, y = value, color = variable)) +
geom_line() +
theme_minimal() +
labs(title = "Spectra processed in OpenSpecy",
x = "Wavelength",
y = "Intensity",
color = "Variable") +
theme(plot.title = element_text(hjust = 0.5))
plot_2 = ggplot(df2_long, aes(x = wavenumber, y = value, color = variable)) +
geom_line() +
theme_minimal() +
labs(title = "Spectra processed in OpenSpecy",
x = "Wavelength",
y = "Intensity",
color = "Variable") +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(plot_1, plot_2, ncol = 2)
library(gridExtra)
grid.arrange(plot_1, plot_2, ncol = 2)
# remove rows with 0, else scaling wont work
df_1 = df_1[apply(df_1!=0, 1, all),]
df_2 = df_2[apply(df_2!=0, 1, all),]
# tranpose
df1_pca = t(df_1)
df1_pca = t(df_2)
# make first row column names
colnames(df1_pca) = as.character(unlist(df1_pca[1, ]))
colnames(df2_pca) = as.character(unlist(df2_pca[1, ]))
# remove rows with 0, else scaling wont work
df_1 = df_1[apply(df_1!=0, 1, all),]
df_2 = df_2[apply(df_2!=0, 1, all),]
# tranpose
df1_pca = t(df_1)
df2_pca = t(df_2)
# make first row column names
colnames(df1_pca) = as.character(unlist(df1_pca[1, ]))
colnames(df2_pca) = as.character(unlist(df2_pca[1, ]))
# replace previous column names and reset
df1_pca = df1_pca[-1, ]
rownames(df1_pca) = NULL
df2_pca = df2_pca[-1, ]
rownames(df2_pca) = NULL
# inspect the results
View(df1_pca)
View(df2_pca)
# calculate PCs
results_1 = prcomp(df1_pca, scale=TRUE)
results_2 = prcomp(df2_pca, scale = TRUE)
# reverse eigenvectors
results_1$rotation = -1*results_1$rotation
results_2$rotation = -1*results_2$rotation
# dispay PCs
results_1$rotation
results_2$rotation
# automatic biplot
biplot_1 = biplot(results_1, scale = 0)
biplot_2 = biplot(results_2, scale = 0)
grid.arrange(biplot_1, biplot_2, ncol = 2)
###############################
# PERFORM PROCRUSTES ANALYSIS #
###############################
procrusteS(X = results_1, Y = results_2, symmetric = FALSE)
install.packages("vegan")
library(vegan)
procrusteS(X = results_1, Y = results_2, symmetric = FALSE)
install.packages("ade4")
library(ade4)
procrustes(X = results_1, Y = results_2, symmetric = FALSE)
procrustes(X = results_1, Y = results_2, symmetric = TRUE)
pro = procrustes(X = results_1, Y = results_2, symmetric = TRUE)
print(pro)
plot(pro, kind = 1, type = "text")
plot(pro, kind = 2)
protest(X = pca.env, Y = pca.spe, scores = "sites", permutations = 999)
protest(X = results_1, Y = results_2, scores = "sites", permutations = 999)
# automatic biplot
biplot_1 = biplot(results_1, scale = 0)
biplot_2 = biplot(results_2, scale = 0)
biplot_2 = biplot(results_2, scale = 0)
# perform procrustes analyses
pro = procrustes(X = results_1, Y = results_2, symmetric = TRUE)
print(pro)
# plot the results
plot(pro, kind = 1, type = "text")
plot(pro, kind = 2)
# perform procrustes randomization test
protest(X = results_1, Y = results_2, scores = "sites", permutations = 999)
# perform procrustes randomization test
protest(X = results_1, Y = results_2, scores = "sites", permutations = 999)
# perform procrustes randomization test
protest(X = results_1, Y = results_2, scores = "sites", permutations = 9999)
