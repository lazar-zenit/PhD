colnames(df_pca) = as.character(unlist(df_pca[1, ]))
# replace previous column names and reset
df_pca = df_pca[-1, ]
rownames(df) = NULL
# CALCULATE PCs
results = prcomp(df_pca, scale=TRUE)
# reverse eigenvectors
results$rotation = -1*results$rotation
# dispay PCs
results$rotation
# biplot (useless in this case)
biplot(results, scale = 0)
#calculate total variance explained by each principal component
var_explained = results$sdev^2 / sum(results$sdev^2)
#create scree plot
qplot(c(1:6), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
library(ggplot2)
# Convert scores to a data frame
scores_df <- as.data.frame(results$x)
# Assuming you want to plot the first two principal components (PC1 and PC2)
ggplot(scores_df, aes(x = PC1, y = PC2)) +
geom_point() +
labs(x = "PC1", y = "PC2", title = "PCA Score Plot")
# read and inspect dataframe
df = read.csv('central_points_good.csv')
View(df)
# remove rows with 0, else scaling wont work
library(dplyr)
df = df[apply(df!=0, 1, all),]
View(df)
# TRANSPOSE DATAFRAME, TIDY UP AND INSPECT
# tranpose
df_pca = t(df)
# make first row column names
colnames(df_pca) = as.character(unlist(df_pca[1, ]))
# replace previous column names and reset
df_pca = df_pca[-1, ]
rownames(df) = NULL
# CALCULATE PCs
results = prcomp(df_pca, scale=TRUE)
# reverse eigenvectors
results$rotation = -1*results$rotation
# dispay PCs
results$rotation
# biplot (useless in this case)
biplot(results, scale = 0)
# read and inspect dataframe
df = read.csv('central_points_good.csv')
# set work directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets")
# read and inspect dataframe
df = read.csv('central_points_good.csv')
View(df)
# remove rows with 0, else scaling wont work
library(dplyr)
df = df[apply(df!=0, 1, all),]
View(df)
# TRANSPOSE DATAFRAME, TIDY UP AND INSPECT
# tranpose
df_pca = t(df)
# make first row column names
colnames(df_pca) = as.character(unlist(df_pca[1, ]))
# replace previous column names and reset
df_pca = df_pca[-1, ]
rownames(df) = NULL
# inspect the results
View(df_pca)
# CALCULATE PCs
results = prcomp(df_pca, scale=TRUE)
print(results)
# reverse eigenvectors
results$rotation = -1*results$rotation
# dispay PCs
results$rotation
# biplot (useless in this case)
biplot(results, scale = 0)
# read and inspect dataframe
df = read.csv('central_points_bad.csv')
# remove rows with 0, else scaling wont work
library(dplyr)
df = df[apply(df!=0, 1, all),]
# TRANSPOSE DATAFRAME, TIDY UP AND INSPECT
# tranpose
df_pca = t(df)
# make first row column names
colnames(df_pca) = as.character(unlist(df_pca[1, ]))
# replace previous column names and reset
df_pca = df_pca[-1, ]
rownames(df) = NULL
# CALCULATE PCs
results = prcomp(df_pca, scale=TRUE)
print(results)
# reverse eigenvectors
results$rotation = -1*results$rotation
# dispay PCs
results$rotation
# biplot (useless in this case)
biplot(results, scale = 0)
#calculate total variance explained by each principal component
var_explained = results$sdev^2 / sum(results$sdev^2)
#create scree plot
qplot(c(1:6), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
#create scree plot
ggplot(c(1:6), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
library(ggplot2)
#create scree plot
ggplot(c(1:6), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
#create scree plot
qplot(c(1:6), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
# Convert scores to a data frame
scores_df <- as.data.frame(results$x)
# Assuming you want to plot the first two principal components (PC1 and PC2)
ggplot(scores_df, aes(x = PC1, y = PC2)) +
geom_point() +
labs(x = "PC1", y = "PC2", title = "PCA Score Plot")
# set work directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets")
# read and inspect dataframe
df = read.csv('central_points_good.csv')
# CHECK THE NORMALITY
# vizualize distribution to check normality
#reshape the dataframe and check it
library(tidyr)
df_long = pivot_longer(df, cols = starts_with("c"),
names_to = "variable",
values_to = "value")
# plot the histograms
ggplot(df_long, aes(x = value, fill = variable)) +
geom_histogram(bins = 30,
alpha = 0.6,
position = 'identity') +
facet_wrap(~ variable,
scales = 'free') +
theme_minimal() +
labs(title = "Histograms of Intensity Variables",
x = "Value",
y = "Frequency",
fill = "Variable") +
theme(plot.title = element_text(hjust = 0.5))
# VISUAL INSPECTION
# plot the all spectral lines
ggplot(df_long, aes(x = wavenumber, y = value, color = variable)) +
geom_line() +
theme_minimal() +
labs(title = "Multiple Intensity Variables Against Wavelength",
x = "Wavelength",
y = "Intensity",
color = "Variable") +
theme(plot.title = element_text(hjust = 0.5))
#COVARIANCE
cov_matrix = cov(selected_data)
print(cov_matrix)
# prepare matrix to be ploted as heatmap
melted_cov = melt(cov_matrix)
melted_cov$Var1 <- as.factor(melted_cov$Var1)
melted_cov$Var2 <- as.factor(melted_cov$Var2)
melted_cov$value <- as.numeric(melted_cov$value)
#plot the matrix
ggplot(data = melted_cov, aes(x = Var1, y= Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = median(melted_cov$value),
limit = c(min(melted_cov$value), max(melted_cov$value)),
space="Lab",
name="Covariance\n of FTIR spectra") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90,
vjust = 1,
size = 12,
hjust = 1)) +
coord_fixed()
# CORRELATION
# make correlation matrix
cor_matrix = cor(selected_data)
print(cor_matrix)
# t-test for the matrix
library(Hmisc)
rcorr(as.matrix(selected_data))
# make data suitable for graphs
library(reshape2)
melted_cor = melt(cor_matrix)
# plot the correlation matrix
library(ggplot2)
ggplot(data = melted_cor, aes(x = Var1, y= Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue",
high = "red",
mid = "white",
midpoint = median(melted_cor$value),
limit = c(min(melted_cor$value), max(melted_cor$value)),
space="Lab",
name="Pearson correlation\n of FTIR spectra") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 90,
vjust = 1,
size = 12,
hjust = 1)) +
coord_fixed()
#setup work directory
setwd("G:/My Drive/PhD/Doktorat/FTIR analysis/Spektri master")
#import libraries
library(ggplot2)
library(dplyr)
library(scales)
library(patchwork)
df = read.csv("master_data_table_transposed.csv")
# check the mean spectre
plot(df$wavelenght, df$mean_intensity, type="l")
# Distribution of loadings - p1
par(mfrow = c(1,1))
hist(df$p1, freq = FALSE)
dens1 = density(df$p1)
lines(dens1, lwd=2, col = "red")
# Distribution of loadings -p2
par(mfrow = c(1,1))
hist(df$p2, freq = FALSE)
dens2 = density(df$p2)
lines(dens2, lwd=2, col = "red")
# Distribution of loadings -p3
par(mfrow = c(1,1))
hist(df$p3, freq = FALSE)
dens3 = density(df$p3)
lines(dens3, lwd=2, col = "red")
# LOADINGS AND FTIR - UNSCALED
# p1
plot1_unscaled = ggplot(df, aes(x=wavelenght)) +
geom_bar(aes(y=p1),
stat = "identity",
fill="red",
width = 2) +
geom_line(aes(y = mean_intensity),
color = "black",
size = 0.75)
# p2
plot2_unscaled = ggplot(df, aes(x=wavelenght)) +
geom_bar(aes(y=p2),
stat = "identity",
fill="red",
width = 2) +
geom_line(aes(y = mean_intensity),
color = "black",
size = 0.75)
# p3
plot3_unscaled = ggplot(df, aes(x=wavelenght)) +
geom_bar(aes(y=p3),
stat = "identity",
fill="red",
width = 2) +
geom_line(aes(y = mean_intensity),
color = "black",
size = 0.75)
# Combine and display plots
combined_plot_unscaled = plot1_unscaled / plot2_unscaled / plot3_unscaled
print(combined_plot_unscaled)
# RAINBOW PLOT
#p1
rainbow_plot_1 = ggplot(df, aes(x=wavelenght, y=mean_intensity)) +
geom_line(size=1.5, aes(colour = abs(p1))) +
scale_color_gradient(limits = c(0,
abs(max(df$p1))),
low="green",
high="red") +
labs(title = "Mean spectre of experimental runs vs. PC1 loadings",
x = "Wavenumber",
y = "Apsorbance",
color = "Absolute value of \n PC1 Loadings")
#p2
rainbow_plot_2 = ggplot(df, aes(x=wavelenght, y=mean_intensity)) +
geom_line(size=1.5, aes(colour = abs(p2))) +
scale_color_gradient(limits = c(0,
abs(max(df$p2))),
low="green",
high="red") +
labs(title = "Mean spectre of experimental runs vs. PC2 loadings",
x = "Wavenumber",
y = "Apsorbance",
color = "Absolute value of \n PC2 Loadings")
#p3
rainbow_plot_3 = ggplot(df, aes(x=wavelenght, y=mean_intensity)) +
geom_line(size=1.5, aes(colour = abs(p3))) +
scale_color_gradient(limits = c(0,
max(df$p3)),
low="green",
high="red") +
labs(title = "Mean spectre of experimental runs vs. PC3 loadings",
x = "Wavenumber",
y = "Apsorbance",
color = "Absolute value of \n PC3 Loadings")
# Combine and display rainbow plots
combined_rainbow_plot = rainbow_plot_1 / rainbow_plot_2 / rainbow_plot_3
print(combined_rainbow_plot)
# set work directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets")
# read and inspect dataframe
df = read.csv('test_all.csv')
View(df)
# remove rows with 0, else scaling wont work
library(dplyr)
df = df[apply(df!=0, 1, all),]
# TRANSPOSE DATAFRAME, TIDY UP AND INSPECT
# tranpose
df_pca = t(df)
# make first row column names
colnames(df_pca) = as.character(unlist(df_pca[1, ]))
# replace previous column names and reset
df_pca = df_pca[-1, ]
rownames(df) = NULL
# inspect the results
View(df_pca)
# CALCULATE PCs
results = prcomp(df_pca, scale=TRUE)
print(results)
# reverse eigenvectors
results$rotation = -1*results$rotation
# dispay PCs
results$rotation
# biplot (useless in this case)
biplot(results, scale = 0)
#calculate total variance explained by each principal component
var_explained = results$sdev^2 / sum(results$sdev^2)
#create scree plot
qplot(c(1:6), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
library(ggplot2)
#create scree plot
qplot(c(1:6), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
#calculate total variance explained by each principal component
var_explained = results$sdev^2 / sum(results$sdev^2)
print(var_explained)
#create scree plot
qplot(c(1:6), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
#create scree plot
qplot(c(1:30), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
library(ggplot2)
# Convert scores to a data frame
scores_df <- as.data.frame(results$x)
# Assuming you want to plot the first two principal components (PC1 and PC2)
ggplot(scores_df, aes(x = PC1, y = PC2)) +
geom_point() +
labs(x = "PC1", y = "PC2", title = "PCA Score Plot")
# Assuming you want to plot the first two principal components (PC1 and PC2)
ggplot(scores_df, aes(x = PC2, y = PC3)) +
geom_point() +
labs(x = "PC1", y = "PC2", title = "PCA Score Plot")
# CALCULATE PCs
results = prcomp(df_pca, scale=TRUE)
View(results)
# loadings plot
fviz_pca_var(results)
# loadings plot
install.packages('MASS')
install.packages('MASS')
#setup work directory
setwd("G:/My Drive/PhD/Doktorat/FTIR analysis/Spektri master")
#import libraries
library(ggplot2)
library(dplyr)
library(scales)
library(patchwork)
df = read.csv("master_data_table_transposed.csv")
View(df)
# LOADINGS AND FTIR - UNSCALED
# p1
plot1_unscaled = ggplot(df, aes(x=wavelenght)) +
geom_bar(aes(y=p1),
stat = "identity",
fill="red",
width = 2) +
geom_line(aes(y = mean_intensity),
color = "black",
size = 0.75)
# p2
plot2_unscaled = ggplot(df, aes(x=wavelenght)) +
geom_bar(aes(y=p2),
stat = "identity",
fill="red",
width = 2) +
geom_line(aes(y = mean_intensity),
color = "black",
size = 0.75)
# p3
plot3_unscaled = ggplot(df, aes(x=wavelenght)) +
geom_bar(aes(y=p3),
stat = "identity",
fill="red",
width = 2) +
geom_line(aes(y = mean_intensity),
color = "black",
size = 0.75)
# Combine and display plots
combined_plot_unscaled = plot1_unscaled / plot2_unscaled / plot3_unscaled
print(combined_plot_unscaled)
# set working directory
setwd("C:\Users\Lenovo\Documents\Programiranje\PhD\SpectralTool\datasets\stefan")
# read and inspect dataframe - weat
df = read.csv('psenica.csv.csv')
# set working directory
setwd("C:\Users\Lenovo\Documents\Programiranje\PhD\SpectralTool\datasets\stefan")
# read and inspect dataframe - weat
df = read.csv('psenica.csv.csv')
# set working directory
setwd("C:\Users\Lenovo\Documents\Programiranje\PhD\SpectralTool\datasets\stefan")
# read and inspect dataframe - weat
df = read.csv('psenica.csv')
View(df)
# set working directory
setwd("C:\Users\Lenovo\Documents\Programiranje\PhD\SpectralTool\datasets\stefan")
# read and inspect dataframe - weat
wheat = read.csv('psenica.csv')
View(df)
# set working directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/stefan")
# read and inspect dataframe - weat
wheat = read.csv('psenica.csv')
View(df)
View(wheat)
# remove zero columns
library(dplyr)
wheat = wheat[apply(wheat!=0, 1, all),]
View(wheat)
# remove zero columns
wheat = wheat[apply(wheat, 1, function(row) all(row != 0)), ]
View(wheat)
# set working directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/stefan")
# read and inspect dataframe - weat
wheat = read.csv('psenica.csv')
# set working directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/stefan")
# read and inspect dataframe - weat
wheat = read.csv('psenica.csv')
View(wheat)
wheat_clean = apply(wheat, 1, function(row) all(row !=0 ))
View(wheat)
# set working directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/stefan")
# read and inspect dataframe - weat
wheat = read.csv('psenica.csv')
View(wheat)
# remove zero columns
wheat = wheat[apply(wheat!=0, 1, all),]
View(wheat)
# set working directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/stefan")
# read and inspect dataframe - weat
wheat = read.csv('psenica.csv')
# remove zero columns
library(dplyr)
wheat_new = filter_if(wheat, is.numeric, all_vars((.) != 0))
View(wheat_new)
# set working directory
setwd("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/stefan")
# read and inspect dataframe - weat
wheat = read.csv('psenica.csv')
# remove zero columns
library(dplyr)
wheat_new = filter_if(wheat, is.numeric, all_vars((.) != 0))
View(wheat_new)
wheat_new <- subset(wheat, rowSums(data != 0) > 0)
# Load libraries
library(OpenSpecy)
# open .spa files
spectrum = read_any("C:/Users/Lenovo/Documents/Programiranje/PhD/SpectralTool/datasets/viminacijum/PedjaB 01.spa")
plot(spectrum)
plotly_spec(spectrum)
run_app()
